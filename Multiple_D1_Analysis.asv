clear all;
close all;
clc;

setOSDetails;
reverse = false;

%% Initialize storage
allStimuli = struct();
i = 1;

disp('Select folders containing stimuli.mat files. Press Cancel when done.');

while true
    folderPath = uigetdir(pwd, 'Select a folder with stimuli.mat');
    if isequal(folderPath,0)
        break; % user pressed cancel
    end
    
    stimFile = fullfile(folderPath,'stimuli.mat');
    if exist(stimFile,'file')
        loadedStim = load(stimFile);
        if isfield(loadedStim,'stimuli')
            allStimuli(i).stimuli = loadedStim.stimuli;
            allStimuli(i).folder = folderPath;
            allStimuli(i).filename = 'stimuli.mat';
            fprintf('Loaded stimuli.mat from: %s\n', folderPath);
            i = i + 1;
        else
            warning('No variable named "stimuli" found in %s. Skipping...', stimFile);
        end
    else
        warning('No stimuli.mat found in %s. Skipping...', folderPath);
    end
end

if isempty(fieldnames(allStimuli))
    error('No valid stimuli.mat files were loaded.');
else
    disp(['Loaded ' num2str(numel(allStimuli)) ' stimuli structures.']);
end

%% --- Concatenate allStimuli into one big structure ---
% Assume allStimuli(i).stimuli exists
nSessions = numel(allStimuli);

% Initialize containers
smooth_resamp_vels = [];
Cue1_times = [];
Cue2_times = [];
laser_trial_times = [];

% Use first session’s constants (assuming they don’t change)
samplingFrequency = allStimuli(1).stimuli.stimsamplingrate;
finalFPS = allStimuli(1).stimuli.downsamplingrate;
circum = allStimuli(1).stimuli.ball_circum;

laser_pulse_dur = allStimuli(1).stimuli.lasertimes.laserPulseDur;
laser_trial_freq = allStimuli(1).stimuli.lasertimes.laserFreq;
laser_trial_dur = allStimuli(1).stimuli.lasertimes.laserDur;

% Track cumulative time offset (to make times chronological)
timeOffset = 0;

for i = 1:nSessions
    stim = allStimuli(i).stimuli;

    % --- concat ball velocity ---
    smooth_resamp_vels = [smooth_resamp_vels; stim.ball_angular_vel];

    % --- cue times (adjusted for offset) ---
    Cue1_times = [Cue1_times; stim.cue1times + timeOffset];
    Cue2_times = [Cue2_times; stim.cue2times + timeOffset];

    % --- laser onset times (adjusted for offset) ---
    laser_trial_times = [laser_trial_times; stim.lasertimes.laserontimes + timeOffset];

    % update offset (convert to seconds based on sample count / sampling freq)
    durationSec = numel(stim.ball_angular_vel) / stim.stimsamplingrate;
    timeOffset = timeOffset + durationSec;
end

%% Build Cue structures
Cue1 = struct();
Cue1.onsetID   = Cue1_times * samplingFrequency;
Cue1.onsetTime = Cue1_times;

Cue2 = struct();
Cue2.onsetID   = Cue2_times * samplingFrequency;
Cue2.onsetTime = Cue2_times;

%% --- assuming there are only 1 type of laser, I will segregate Cue1 laser or Cue2 laser from probe trials ---
if reverse % If Cue 2 has probe
    [Cue2, Cue2_probe] = unpair_probe_trials(Cue2, laser_trial_times, ...
        cue_to_laser_time);
else % If Cue 1 has probe
    [Cue1, Cue1_probe] = unpair_probe_trials(Cue1, laser_trial_times, ...
        cue_to_laser_time);
end

%% --- Plot trial by trial angular velocity of cue 1 and cue 2 using imagesc ---
if reverse
    trialTypes  = {'Cue 1','Cue 2','Cue 2 probe'};
    trial_arrays = {Cue1, Cue2, Cue2_probe};
else
    trialTypes  = {'Cue 1','Cue 2','Cue 1 probe'};
    trial_arrays = {Cue1, Cue2, Cue1_probe};
end

precue = 1;
postcue = 6;
doBaseline = 0; % Only really matters if mouse is runnning a lot before cue onset

plotTrialHeatmaps(smooth_resamp_vels, trial_arrays, trialTypes, finalFPS, [precue, postcue], doBaseline);

%% --- plot the startle response adaptation in first one second after cue ---
do2 = 0;
if do2
plotAngVel_byCueOverT(smooth_resamp_vels, trial_arrays,...
                trialTypes, finalFPS, cue_to_laser_time,5);
end

%% --- Save figures: CHANGE NAME ---
% parts = strsplit(ch_info_file, filesep); % split into parts
% 
% name = parts{4};
% session = parts{5};
% tokens = regexp(session, '^(\d+)_', 'tokens'); % extracts session number before underscore
% sessionNum = str2double(tokens{1}{1});
% 
% doSave = 0;
% if doSave
%     saveas(figure(1), sprintf('%s_session%d.png', name, sessionNum))
%     saveas(figure(2), sprintf('%s_session%d_Cue1trials.png', name, sessionNum))
%     saveas(figure(3), sprintf('%s_session%d_Cue2trials.png', name, sessionNum))
%     saveas(figure(4), sprintf('%s_session%d_probetrials.png', name, sessionNum))
% end